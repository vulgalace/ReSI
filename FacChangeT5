# ------------------------------------------------------------------------------
# SCRIPT: TOP 5 SCHOOLS - OUTLIERS REMOVED + SINGLE-FACULTY PLOTS
# ------------------------------------------------------------------------------

library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(Hmisc)

# --- FILE PATHS ---
input_file <- "/Users/vulgalace/Downloads/mybook.xlsx"
output_dir <- "/Users/vulgalace/Downloads/faculty_plots_top5/"
dir.create(output_dir, showWarnings = FALSE)

# 1. Read Excel & Rename Columns
df <- read_excel(input_file) %>%
  rename(
    year = YEAR,
    ipeds_unit_id = IPEDS,
    grad_rank = RANK,
    discipline_name = DISCIPLINE,
    school_name = UNIVERSITY,
    type = TYPE,
    
    assistant_prof_sum = `ASSISTANT PROF SUM`,
    associate_prof_sum = `ASSOCIATE PROF SUM`,
    full_prof_sum      = `FULL PROF SUM`,
    full_time_research_fac_sum = `FT RESEARCH FAC. SUM`,
    part_time_research_fac_sum = `PT RESEARCH FAC. SUM`,
    
    full_time_teaching_non_tenure_sum = `FT TEACHING FAC. (NONT) SUM`,
    part_time_teaching_non_tenure_sum = `PT TEACHING FAC (NONT) SUM`
  )

# 2. Filter to top 5 schools only
df <- df %>% filter(grad_rank <= 5)

# 3–6. Prepare Data
df <- df %>%
  arrange(ipeds_unit_id, year) %>%
  group_by(ipeds_unit_id) %>%
  mutate(
    assistant_next   = lead(assistant_prof_sum),
    associate_next   = lead(associate_prof_sum),
    full_next        = lead(full_prof_sum),
    ft_res_next      = lead(full_time_research_fac_sum),
    pt_res_next      = lead(part_time_research_fac_sum),
    ft_teach_nt_next = lead(full_time_teaching_non_tenure_sum),
    pt_teach_nt_next = lead(part_time_teaching_non_tenure_sum),
    rank_next        = lead(grad_rank),
    year_next        = lead(year)
  ) %>%
  mutate(
    rank_change = grad_rank - rank_next,
    assistant_change   = assistant_next   - assistant_prof_sum,
    associate_change   = associate_next   - associate_prof_sum,
    full_change        = full_next        - full_prof_sum,
    ft_res_change      = ft_res_next      - full_time_research_fac_sum,
    pt_res_change      = pt_res_next      - part_time_research_fac_sum,
    ft_teach_nt_change = ft_teach_nt_next - full_time_teaching_non_tenure_sum,
    pt_teach_nt_change = pt_teach_nt_next - part_time_teaching_non_tenure_sum
  ) %>%
  filter(!is.na(year_next)) %>%
  ungroup() %>%
  mutate(year_transition = paste0(year, "-", year_next))

# 7. Filter to Target Year Transitions
target_transitions <- c(
  "2015-2016", "2016-2017", "2017-2018", "2018-2019",
  "2019-2020", "2020-2021", "2021-2022", "2022-2023"
)
df_filtered <- df %>%
  filter(year_transition %in% target_transitions)

# 8. Remove Outliers
df_filtered_no_outliers <- df_filtered %>%
  filter(
    abs(rank_change) <= 20,
    abs(assistant_change)   <= 20,
    abs(associate_change)   <= 20,
    abs(full_change)        <= 20,
    abs(ft_res_change)      <= 20,
    abs(pt_res_change)      <= 20,
    abs(ft_teach_nt_change) <= 20,
    abs(pt_teach_nt_change) <= 20
  )

cat("\n--- TOP 5 ONLY: REMOVED OUTLIERS ---\n")
cat("Rows before removing outliers:", nrow(df_filtered), "\n")
cat("Rows after removing outliers :", nrow(df_filtered_no_outliers), "\n\n")

# 9. Console Stats
cat("\n--- DESCRIPTIVE STATS (Top 5 Only) ---\n")
summary(df_filtered_no_outliers[, c("rank_change",
                                    "assistant_change","associate_change","full_change",
                                    "ft_res_change","pt_res_change",
                                    "ft_teach_nt_change","pt_teach_nt_change")])
cat("\n--- CORRELATION MATRIX (Top 5) ---\n")
df_cor <- df_filtered_no_outliers %>%
  select(rank_change, assistant_change, associate_change, full_change,
         ft_res_change, pt_res_change, ft_teach_nt_change, pt_teach_nt_change)
rc <- rcorr(as.matrix(df_cor), type="pearson")
cat("Correlation Coefficients:\n"); print(rc$r)
cat("\nP-values:\n"); print(rc$P)

cat("\n--- MULTIPLE REGRESSION: Top 5 Schools ---\n")
model_all <- lm(rank_change ~ assistant_change + associate_change + full_change +
                  ft_res_change + pt_res_change + ft_teach_nt_change + pt_teach_nt_change,
                data=df_filtered_no_outliers)
print(summary(model_all))

# 10. PLOTS + SAVE

fac_type_labels <- c(
  "assistant_change"     = "Assistant Professors",
  "associate_change"     = "Associate Professors",
  "full_change"          = "Full Professors",
  "ft_res_change"        = "Full-Time Research Faculty",
  "pt_res_change"        = "Part-Time Research Faculty",
  "ft_teach_nt_change"   = "Full-Time Teaching (Nontenure)",
  "pt_teach_nt_change"   = "Part-Time Teaching (Nontenure)"
)

faculty_types <- c(
  "full_change",
  "associate_change",
  "assistant_change",
  "ft_teach_nt_change",
  "ft_res_change",
  "pt_teach_nt_change",
  "pt_res_change"
)

for(fac_type in faculty_types) {
  cat("\n----------------------------------------\n")
  cat("FACULTY TYPE:", fac_type, "\n")
  cat("----------------------------------------\n")
  
  df_sub <- df_filtered_no_outliers %>%
    select(school_name, rank_change, !!sym(fac_type)) %>%
    filter(!is.na(rank_change) & !is.na(!!sym(fac_type)))
  
  if(nrow(df_sub) == 0) {
    cat("No valid rows for", fac_type, ". Skipping.\n")
    next
  }
  
  df_sub <- df_sub %>%
    mutate(plot_color = ifelse(school_name == "Purdue University", "#cfb991", "#000000"))
  
  formula_str <- paste0(fac_type, " ~ rank_change")
  model_fac <- lm(as.formula(formula_str), data = df_sub)
  
  slope     <- coef(model_fac)[2]
  intercept <- coef(model_fac)[1]
  r_squared <- summary(model_fac)$r.squared
  p_value   <- summary(model_fac)$coefficients[2,4]
  
  r_squared_str <- if (r_squared < 0.001) "<0.001" else as.character(round(r_squared, 3))
  
  cat("\n", fac_type_labels[fac_type], "\n", sep = "")
  cat("y = ", round(slope, 3), "x + ", round(intercept, 3),
      ", r² = ", r_squared_str,
      ", p = ", formatC(p_value, format = "e", digits = 2), "\n", sep = "")
  cat("----------------------------------------\n")
  
  p_fac <- ggplot(df_sub, aes(x = rank_change, y = !!sym(fac_type))) +
    geom_point(aes(color = plot_color), size = 3) +
    scale_color_identity(guide = "none") +
    geom_smooth(method = "lm", se = FALSE, color = "red") +
    geom_vline(xintercept = 0, color = "black") +
    geom_hline(yintercept = 0, color = "black") +
    theme_minimal() +
    theme(
      plot.title = element_blank(),
      axis.title.x = element_blank(),
      axis.title.y = element_blank()
    )
  
  print(p_fac)
  
  filename <- paste0(output_dir, "faculty_plot_", fac_type, ".png")
  ggsave(filename = filename, plot = p_fac, width = 6, height = 5, dpi = 300)
}

cat("\nDone! Saved plots for Top 5 schools to: ", output_dir, "\n")
