//no r^2, just r

# Load necessary libraries
library(readxl)      # For reading Excel files
library(dplyr)       # For data manipulation
library(ggplot2)     # For plotting
library(gridExtra)   # For arranging plots
library(scales)      # For formatting axis labels

# Read the Excel file (headers in the first row)
my_data <- read_excel("C:/Users/kmala/OneDrive/Desktop/Work/AcA2016_2023.xlsx", col_names = TRUE)

# Clean column names and remove extra columns (e.g., those starting with "...")
names(my_data) <- trimws(names(my_data))
my_data <- my_data %>% select(-matches("^\\.\\.\\."))

# Create subsets for plotting:
# For the "ALL" data (ranks 1–97), add a column "PurdueFlag" for highlighting
data_all <- my_data %>% 
  filter(`Rank` >= 1 & `Rank` <= 97) %>%
  mutate(PurdueFlag = ifelse(Institution == "Purdue University", "Purdue", "Other"))

data_1_18 <- my_data %>% filter(`Rank` >= 1 & `Rank` <= 18)
data_1_10 <- my_data %>% filter(`Rank` >= 1 & `Rank` <= 10)
data_1_5_purdue <- my_data %>% filter(`Rank` <= 5 | Institution == "Purdue University")

# For the public/private split (ranks 1–18)
data_1_18_public  <- data_1_18 %>% filter(`Institution Type` == "Public")
data_1_18_private <- data_1_18 %>% filter(`Institution Type` == "Private")

# Specify the variable to plot (must exactly match your column name)
variable_to_plot <- "Total Grant Dollars"

#######################################
# Define functions for plotting
#######################################

# Function for the "ALL" plot with both exponential and linear fits.
plot_all <- function(data, yvar) {
  data_clean <- data %>% 
    filter(!is.na(.[[yvar]]), is.finite(.[[yvar]]),
           !is.na(`Rank`), is.finite(`Rank`))
  
  # For the exponential fit, use only rows with positive y values.
  data_exp <- data_clean %>% filter(.[[yvar]] > 0)
  if(nrow(data_exp) == 0) stop("No valid data for exponential model (all y values are non-positive).")
  
  # Linear model on full data:
  lm_model <- lm(as.formula(sprintf("`%s` ~ `Rank`", yvar)), data = data_clean)
  intercept <- coef(lm_model)[1]
  slope <- coef(lm_model)[2]
  r_value <- cor(data_clean$`Rank`, data_clean[[yvar]], use = "complete.obs")
  linear_eq <- sprintf("Linear: y = %.2f + %.2f*x, r = %.2f", intercept, slope, r_value)
  
  # Exponential model on data_exp:
  lm_log <- lm(log(data_exp[[yvar]]) ~ data_exp[["Rank"]], data = data_exp)
  a_init <- exp(coef(lm_log)[1])
  b_init <- coef(lm_log)[2]
  
  exp_model <- nls(as.formula(sprintf("`%s` ~ a * exp(b * `Rank`)", yvar)),
                   data = data_exp,
                   start = list(a = a_init, b = b_init))
  coef_exp <- coef(exp_model)
  exp_eq <- sprintf("Exponential: y = %.2f * exp(%.2f*x)", coef_exp["a"], coef_exp["b"])
  
  p <- ggplot(data_clean, aes(x = `Rank`, y = .data[[yvar]])) +
    geom_point(aes(color = PurdueFlag), size = 2, alpha = 0.7) +
    geom_smooth(data = data_exp,
                method = "nls", formula = y ~ a * exp(b * x),
                method.args = list(start = list(a = a_init, b = b_init)),
                se = FALSE, aes(linetype = "Exponential"), color = "blue", size = 1) +
    geom_smooth(method = "lm", se = FALSE, aes(linetype = "Linear"),
                color = "red", size = 1) +
    labs(title = paste(yvar, "vs Rank (All Ranks)"),
         x = "Rank",
         y = yvar) +
    scale_x_continuous(breaks = seq(1, max(data_clean$`Rank`, na.rm = TRUE), by = 10),
                       labels = comma) +
    scale_y_continuous(expand = expansion(mult = c(0.2, 0.2)), labels = comma) +
    theme_minimal() +
    scale_color_manual(name = "Institution", values = c("Purdue" = "darkgoldenrod", "Other" = "black")) +
    scale_linetype_manual(name = "Model", values = c("Exponential" = "solid", "Linear" = "dashed")) +
    annotate("text", x = Inf, y = Inf, 
             label = paste(linear_eq, "\n", exp_eq),
             hjust = 1.1, vjust = 2, size = 4, color = "black")
  
  return(p)
}

# Function for linear-only plots that also highlight Purdue.
plot_linear <- function(data, yvar, title_suffix = "") {
  data_clean <- data %>% 
    filter(!is.na(.[[yvar]]), is.finite(.[[yvar]]),
           !is.na(`Rank`), is.finite(`Rank`))
  
  lm_model <- lm(as.formula(sprintf("`%s` ~ `Rank`", yvar)), data = data_clean)
  intercept <- coef(lm_model)[1]
  slope <- coef(lm_model)[2]
  r_value <- cor(data_clean$`Rank`, data_clean[[yvar]], use = "complete.obs")
  eq_label <- sprintf("y = %.2f + %.2f*x, r = %.2f", intercept, slope, r_value)
  
  p <- ggplot(data_clean, aes(x = `Rank`, y = .data[[yvar]])) +
    geom_point(aes(color = ifelse(Institution == "Purdue University", "Purdue", "Other")), 
               size = 2, alpha = 0.7) +
    geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
    labs(title = paste(yvar, "vs Rank", title_suffix),
         x = "Rank",
         y = yvar) +
    scale_y_continuous(expand = expansion(mult = c(0.2, 0.2)), labels = comma) +
    theme_minimal() +
    scale_color_manual(name = "Institution", values = c("Purdue" = "darkgoldenrod", "Other" = "black")) +
    annotate("text", x = Inf, y = Inf, label = eq_label,
             hjust = 1.1, vjust = 2, size = 4, color = "black")
  
  return(p)
}

#######################################
# Create the six plots
#######################################

# 1. ALL plot (ranks 1–97) with both exponential and linear fits.
p_all <- plot_all(data_all, variable_to_plot)

# 2. Ranks 1–18 (linear fit only)
p_1_18 <- plot_linear(data_1_18, variable_to_plot, "(Ranks 1–18)")

# 3. Ranks 1–10 (linear fit only)
p_1_10 <- plot_linear(data_1_10, variable_to_plot, "(Ranks 1–10)")

# 4. Ranks 1–5 plus Purdue (linear fit only)
p_1_5_purdue <- plot_linear(data_1_5_purdue, variable_to_plot, "(Ranks 1–5 + Purdue)")

# 5. Ranks 1–18 for Public institutions (linear fit only)
p_1_18_public <- plot_linear(data_1_18_public, variable_to_plot, "(Public, Ranks 1–18)")

# 6. Ranks 1–18 for Private institutions (linear fit only)
p_1_18_private <- plot_linear(data_1_18_private, variable_to_plot, "(Private, Ranks 1–18)")

#######################################
# Arrange all 6 plots together in a 3 x 2 grid
#######################################
grid.arrange(p_all, p_1_18, p_1_10, p_1_5_purdue, p_1_18_public, p_1_18_private, ncol = 3)
